// Code generated by MockGen. DO NOT EDIT.
// Source: bll/leaderboard/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	leaderboard "github.com/byyjoww/leaderboard/bll/leaderboard"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLeaderboardController is a mock of LeaderboardController interface.
type MockLeaderboardController struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardControllerMockRecorder
}

// MockLeaderboardControllerMockRecorder is the mock recorder for MockLeaderboardController.
type MockLeaderboardControllerMockRecorder struct {
	mock *MockLeaderboardController
}

// NewMockLeaderboardController creates a new mock instance.
func NewMockLeaderboardController(ctrl *gomock.Controller) *MockLeaderboardController {
	mock := &MockLeaderboardController{ctrl: ctrl}
	mock.recorder = &MockLeaderboardControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardController) EXPECT() *MockLeaderboardControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLeaderboardController) Create(ctx context.Context, name string, capacity, mode int) (*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, capacity, mode)
	ret0, _ := ret[0].(*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLeaderboardControllerMockRecorder) Create(ctx, name, capacity, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLeaderboardController)(nil).Create), ctx, name, capacity, mode)
}

// Get mocks base method.
func (m *MockLeaderboardController) Get(ctx context.Context, leaderboardId uuid.UUID) (*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, leaderboardId)
	ret0, _ := ret[0].(*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLeaderboardControllerMockRecorder) Get(ctx, leaderboardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLeaderboardController)(nil).Get), ctx, leaderboardId)
}

// List mocks base method.
func (m *MockLeaderboardController) List(ctx context.Context, limit, offset int) ([]*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLeaderboardControllerMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLeaderboardController)(nil).List), ctx, limit, offset)
}

// ListByMode mocks base method.
func (m *MockLeaderboardController) ListByMode(ctx context.Context, mode, limit, offset int) ([]*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByMode", ctx, mode, limit, offset)
	ret0, _ := ret[0].([]*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByMode indicates an expected call of ListByMode.
func (mr *MockLeaderboardControllerMockRecorder) ListByMode(ctx, mode, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByMode", reflect.TypeOf((*MockLeaderboardController)(nil).ListByMode), ctx, mode, limit, offset)
}

// Remove mocks base method.
func (m *MockLeaderboardController) Remove(ctx context.Context, leaderboardId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, leaderboardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockLeaderboardControllerMockRecorder) Remove(ctx, leaderboardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockLeaderboardController)(nil).Remove), ctx, leaderboardId)
}

// Reset mocks base method.
func (m *MockLeaderboardController) Reset(ctx context.Context, leaderboardId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, leaderboardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockLeaderboardControllerMockRecorder) Reset(ctx, leaderboardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockLeaderboardController)(nil).Reset), ctx, leaderboardId)
}

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreator) Create(ctx context.Context, name string, capacity, mode int) (*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, capacity, mode)
	ret0, _ := ret[0].(*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreatorMockRecorder) Create(ctx, name, capacity, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreator)(nil).Create), ctx, name, capacity, mode)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProvider) Get(ctx context.Context, leaderboardId uuid.UUID) (*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, leaderboardId)
	ret0, _ := ret[0].(*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProviderMockRecorder) Get(ctx, leaderboardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProvider)(nil).Get), ctx, leaderboardId)
}

// List mocks base method.
func (m *MockProvider) List(ctx context.Context, limit, offset int) ([]*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProviderMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProvider)(nil).List), ctx, limit, offset)
}

// ListByMode mocks base method.
func (m *MockProvider) ListByMode(ctx context.Context, mode, limit, offset int) ([]*leaderboard.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByMode", ctx, mode, limit, offset)
	ret0, _ := ret[0].([]*leaderboard.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByMode indicates an expected call of ListByMode.
func (mr *MockProviderMockRecorder) ListByMode(ctx, mode, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByMode", reflect.TypeOf((*MockProvider)(nil).ListByMode), ctx, mode, limit, offset)
}
