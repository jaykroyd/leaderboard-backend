// Code generated by MockGen. DO NOT EDIT.
// Source: bll/participant/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	participant "github.com/byyjoww/leaderboard/bll/participant"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockParticipantController is a mock of ParticipantController interface.
type MockParticipantController struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantControllerMockRecorder
}

// MockParticipantControllerMockRecorder is the mock recorder for MockParticipantController.
type MockParticipantControllerMockRecorder struct {
	mock *MockParticipantController
}

// NewMockParticipantController creates a new mock instance.
func NewMockParticipantController(ctrl *gomock.Controller) *MockParticipantController {
	mock := &MockParticipantController{ctrl: ctrl}
	mock.recorder = &MockParticipantControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipantController) EXPECT() *MockParticipantControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockParticipantController) Create(leaderboardId uuid.UUID, externalId, name string, metadata map[string]string) (*participant.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", leaderboardId, externalId, name, metadata)
	ret0, _ := ret[0].(*participant.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockParticipantControllerMockRecorder) Create(leaderboardId, externalId, name, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockParticipantController)(nil).Create), leaderboardId, externalId, name, metadata)
}

// Get mocks base method.
func (m *MockParticipantController) Get(participantID uuid.UUID) (*participant.RankedParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", participantID)
	ret0, _ := ret[0].(*participant.RankedParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockParticipantControllerMockRecorder) Get(participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParticipantController)(nil).Get), participantID)
}

// List mocks base method.
func (m *MockParticipantController) List(leaderboardId uuid.UUID, limit, offset int) ([]*participant.RankedParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", leaderboardId, limit, offset)
	ret0, _ := ret[0].([]*participant.RankedParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockParticipantControllerMockRecorder) List(leaderboardId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockParticipantController)(nil).List), leaderboardId, limit, offset)
}

// Remove mocks base method.
func (m *MockParticipantController) Remove(participantID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", participantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockParticipantControllerMockRecorder) Remove(participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockParticipantController)(nil).Remove), participantID)
}

// UpdateScore mocks base method.
func (m *MockParticipantController) UpdateScore(participantID uuid.UUID, amount int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", participantID, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockParticipantControllerMockRecorder) UpdateScore(participantID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockParticipantController)(nil).UpdateScore), participantID, amount)
}
