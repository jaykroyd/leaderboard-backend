// Code generated by MockGen. DO NOT EDIT.
// Source: dal/participant/dal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	participant "github.com/byyjoww/leaderboard/dal/participant"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockParticipantDAL is a mock of ParticipantDAL interface.
type MockParticipantDAL struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantDALMockRecorder
}

// MockParticipantDALMockRecorder is the mock recorder for MockParticipantDAL.
type MockParticipantDALMockRecorder struct {
	mock *MockParticipantDAL
}

// NewMockParticipantDAL creates a new mock instance.
func NewMockParticipantDAL(ctrl *gomock.Controller) *MockParticipantDAL {
	mock := &MockParticipantDAL{ctrl: ctrl}
	mock.recorder = &MockParticipantDALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipantDAL) EXPECT() *MockParticipantDALMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockParticipantDAL) Create(participant *participant.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockParticipantDALMockRecorder) Create(participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockParticipantDAL)(nil).Create), participant)
}

// Delete mocks base method.
func (m *MockParticipantDAL) Delete(participant *participant.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockParticipantDALMockRecorder) Delete(participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockParticipantDAL)(nil).Delete), participant)
}

// Exists mocks base method.
func (m *MockParticipantDAL) Exists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockParticipantDALMockRecorder) Exists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockParticipantDAL)(nil).Exists), name)
}

// GetByPK mocks base method.
func (m *MockParticipantDAL) GetByPK(id uuid.UUID) (*participant.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPK", id)
	ret0, _ := ret[0].(*participant.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPK indicates an expected call of GetByPK.
func (mr *MockParticipantDALMockRecorder) GetByPK(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPK", reflect.TypeOf((*MockParticipantDAL)(nil).GetByPK), id)
}

// GetCount mocks base method.
func (m *MockParticipantDAL) GetCount(leaderboardId uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", leaderboardId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockParticipantDALMockRecorder) GetCount(leaderboardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockParticipantDAL)(nil).GetCount), leaderboardId)
}

// GetRankedByPK mocks base method.
func (m *MockParticipantDAL) GetRankedByPK(id uuid.UUID) (*participant.RankedParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRankedByPK", id)
	ret0, _ := ret[0].(*participant.RankedParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRankedByPK indicates an expected call of GetRankedByPK.
func (mr *MockParticipantDALMockRecorder) GetRankedByPK(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankedByPK", reflect.TypeOf((*MockParticipantDAL)(nil).GetRankedByPK), id)
}

// List mocks base method.
func (m *MockParticipantDAL) List(leaderboardId uuid.UUID, limit, offset int) ([]*participant.RankedParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", leaderboardId, limit, offset)
	ret0, _ := ret[0].([]*participant.RankedParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockParticipantDALMockRecorder) List(leaderboardId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockParticipantDAL)(nil).List), leaderboardId, limit, offset)
}

// UpdateScore mocks base method.
func (m *MockParticipantDAL) UpdateScore(participant *participant.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockParticipantDALMockRecorder) UpdateScore(participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockParticipantDAL)(nil).UpdateScore), participant)
}
